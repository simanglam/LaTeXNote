\documentclass[10pt, svgnames, twoside]{NGPLB}
\usepackage{geometry}
\geometry{papersize={188mm, 263mm}, top=2.8cm, outer=2.3cm, inner=2.3cm, bottom=2.8cm, footskip=24pt}
\usepackage{xeCJK}
\setCJKmainfont{王漢宗特明體繁}
\setCJKmonofont{王漢宗特明體繁}
\newCJKfontfamily\Song{Songti TC}
\newCJKfontfamily\Kai{TW-Kai}
\newCJKfontfamily\Raun{jf-openhuninn-1.1.ttf}
\newCJKfontfamily\Hei{Heiti TC}

\usepackage{enumitem}
\setlist{noitemsep}
\usepackage{lipsum}
\usepackage{tabulary}
\usepackage{tikz}
\linespread{1.5}
\pagenumbering{arabic}
\usepackage{graphicx}
\graphicspath{{fig/}}
\usepackage{wrapfig}
\usepackage{etoolbox}
\AtBeginEnvironment{tabular}{\vskip6pt}
\AfterEndEnvironment{tabular}{\vskip6pt}

\usepackage[]{xcolor}
\usepackage[most,minted]{tcolorbox}
\usepackage{minted}
\tcbuselibrary{skins,minted,breakable}
\tcbset{fontupper=\small, breakable, skin=bicolor ,listing engine={minted} ,colback=gray!30!white, colbacklower=gray!5!white, colframe=gray!30!white, minted options={linenos, breaklines, breakanywhere, xleftmargin = 5pt}}

\usepackage{xurl}
\usepackage[breaklinks=true]{hyperref}
\urlstyle{same}
\hypersetup{
hidelinks,
linkcolor=blue,
urlcolor=cyan,
hyperindex = false
}

\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\definecolor{fpft}{HTML}{C2C6A7}
\definecolor{fpbg}{HTML}{254441}
\setlength{\parindent}{0pt}

\usepackage{mhchem}
\usepackage{chemfig}
\usepackage{listings}
\newcommand{\TikZ}{Ti\textit{k}Z}
\usepackage{pgfplots}
\setcounter{tocdepth}{1}
\setlength{\parskip}{5pt}
\newcommand{\pskip}{\vskip10pt}

\usepackage[andrew]{bettertitle}
\author{周造麟}
\title{我也來學 \LaTeX}
\subtitle{通往排版的大門}
\email{qwer09214@gmail.com}

\usepackage{hologo}
\newcommand{\XeTeX}{\hologo{XeTeX}}
\newcommand{\XeLaTeX}{\hologo{XeLaTeX}}

\begin{document}
\maketitle
\pagenumbering{roman}
\tableofcontents\newpage\pagenumbering{arabic}%\renewcommand{\headrulewidth}{0pt}
%\input{前言}
\input{LaTeX 歷史}\newpage
\input{第一部分.tex}
\input{xcolor}\newpage%%xcolor
\input{化學}\newpage%%化學
\input{listing}\newpage%%listing
\input{tcolorbox}\newpage%%tcolorbox
\input{tikz}\newpage%%tikz
\input{pgfplots}\newpage%%pgfplots
\input{Beamer}\newpage%%Beamer
\input{biblatex}\newpage%%biblatex
\input{animate}\newpage%%animate
\input{lualatex}\newpage%%lualatex
\input{lualatex 做動畫}\newpage%%lualatex 做動畫
\input{etoolbox}\newpage%%etoolbox
\input{繼續前行}\newpage%%繼續前行
\input{Beyond LaTeX}\newpage%%Beyond LaTeX
\end{document}\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesClass{NGPLB}[基於LaTeX Class: report and 交大論文格式]
\LoadClassWithOptions{report}
\PassOptionsToClass{\CurrentOption}{report}
\input{trans.def}
\RequirePackage[center]{titlesec}
\RequirePackage{titletoc}
\RequirePackage[encoding=UTF8,style={Traditional}]{zhnumber}%Financial
\RequirePackage[]{geometry}
\RequirePackage{fancyhdr}
\RequirePackage{xpatch}
\RequirePackage{tocloft}
\RequirePackage{xcolor}

%\definecolor{STRUCTURECOLOR}{RGB}{60,113,183}
%\definecolor{structurecolor}{RGB}{60,113,183}
%\definecolor{main}{RGB}{0,166,82}%
%\definecolor{second}{RGB}{255,134,24}%
%\definecolor{third}{RGB}{0,174,247}%

\definecolor{STRUCTURECOLOR}{HTML}{3c71b7}
\definecolor{structurecolor}{HTML}{3c71b7}
\definecolor{main}{HTML}{00a652}%
\definecolor{second}{HTML}{ff8618}%
\definecolor{third}{HTML}{00aef7}%

%\geometry{top=1.5cm,left=2cm,right=2cm,bottom=2.5cm}
\fancypagestyle{myplain}{%
\fancyhf{}%
\fancyhead[LO, RE]{\leftmark}
\fancyhead[RO, LE]{\thepage}
%\cfoot{\color{structurecolor}-\hskip1.5pt\thepage\hskip2pt-}
\renewcommand{\headrulewidth}{0.4pt}% Line at the header invisible
\fancyheadoffset[RO, LE]{-0.5cm} 
}
\pagestyle{myplain}
%\RequirePackage{}
\xpatchcmd{\@chapter}{\addcontentsline{toc}{chapter}%
{\protect\numberline{\thechapter}#1}%
}{ 
\addcontentsline{toc}{chapter}%
{\protect\numberline{第\thechapter 章} #1}%
}{ }{ }
%\xpatchcmd{\chapter}{\thispagestyle{plain}}{ }{ }{ }
\xpatchcmd{\@chapter}{\addtocontents{lof}{\protect\addvspace{10\p@}}}{ }{ }{ }
\xpatchcmd{\@chapter}{\addtocontents{lot}{\protect\addvspace{10\p@}}}{ }{ }{ }
%\xpatchcmd{\chapter}{\if@openright\cleardoublepage\else\clearpage\fi}{\vskip12pt}{}{}

%\renewcommand{\tableofcontents}{\addcontentsline{toc}{chapter}{目錄}\if@twocolumn \@restonecoltrue \onecolumn \else \@restonecolfalse \fi \chapter *{\contentsname \@mkboth {\MakeUppercase \contentsname }{\MakeUppercase \contentsname }}\@starttoc {toc}\if@restonecol \twocolumn \fi}

%\newcommand{\xchaptertitle}{CHAPTER\\\mythechapter}
\newcommand{\xthepart}{第\@zhnum\c@part 部}
%重新定義標題的計數器
\renewcommand \thepart {第\@zhnum\c@part 部}
\newcommand \mythechapter {\ifnum\value{chapter}<10 0\fi\arabic{chapter}}
\newcommand{\xchaptertitle}{Chapter}
\renewcommand \thechapter {\@zhnum\c@chapter}
\renewcommand \thesection {\@arabic\c@chapter.\@arabic\c@section}
\renewcommand \thesubsection {\thesection.\@arabic\c@subsection}
\renewcommand \thefigure {\@arabic\c@chapter.\@arabic\c@figure }
%\renewcommand \theequation {\@arabic\c@myequation}
%\renewenvironment{equation}{\centering $$}{$$\hfill (\theequation)\refstepcounter{myequation}}
\counterwithout{equation}{chapter}
\counterwithout{table}{chapter}
\counterwithout{figure}{chapter}

\renewcommand{\partname}{\thispagestyle{empty}\color{structurecolor}}
\renewcommand{\chaptermark}[1]{\markboth{\xchaptertitle\, #1}{}}
%\renewcommand{\chaptermark}[1]{\markboth{\xchaptertitle\, #1}{}}

%重新定義標題的樣式
\titleformat{\part}{\thispagestyle{empty}\Huge\centering\bfseries\color{structurecolor}}{\noindent\xthepart}{0em}{\\}
\titleformat{\chapter}{\Huge\linespread{1}\selectfont\raggedright\bfseries\color{structurecolor}}{\hskip6.25pt\normalsize\xchaptertitle}{.1em}{\\{\fontsize{50}{55}\selectfont\mythechapter}\\}
\titleformat{\section}{\LARGE\bfseries\color{structurecolor}}{\thesection}{.1em}{\hskip24pt}
\titleformat{\subsection}{\Large\color{structurecolor}}{\thesubsection}{1em}{\hskip12pt}
%\renewcommand{\headrule}{\color{structurecolor}\hrule width\textwidth}

\renewcommand{\cftfigpresnum}{圖}
\renewcommand{\cfttabpresnum}{圖}


\RequirePackage{enumerate}
% list/itemize/enumerate setting
\RequirePackage[shortlabels,inline]{enumitem}
\setlist{nolistsep}
\RequirePackage{tikz} %% load tikz without tikz
\usetikzlibrary{backgrounds,calc,shadows,positioning,fit}
\newcommand*\circled[1]{\tikz[baseline=(char.base)]{
            \node[shape=circle,draw,inner sep=1pt] (char) {#1};}}
\newcommand*{\eitemi}{\tikz \draw [baseline, ball color=structurecolor,draw=none] circle (2pt);}
\newcommand*{\eitemii}{\tikz \draw [baseline, fill=structurecolor,draw=none,circular drop shadow] circle (2pt);}
\newcommand*{\eitemiii}{\tikz \draw [baseline, fill=structurecolor,draw=none] circle (2pt);}
\setlist[enumerate,1]{label=\color{structurecolor}\arabic*.}
\setlist[enumerate,2]{label=\color{structurecolor}(\alph*).}
\setlist[enumerate,3]{label=\color{structurecolor}\Roman*.}
\setlist[enumerate,4]{label=\color{structurecolor}\Alph*.}
\setlist[itemize,1]{label={\eitemi}}
\setlist[itemize,2]{label={\eitemii}}
\setlist[itemize,3]{label={\eitemiii}}

%重新定義chapter後的空間
%\titlespacing*{⟨command⟩}{⟨left⟩}{⟨beforesep⟩}{⟨aftersep⟩}[⟨right⟩]
\titlespacing*{\chapter}{0pt}{0.01\textheight}{24pt}
\titlespacing*{\section}{0pt}{-3pt}{3pt}

%定義目錄中的縮進
%\titlecontents{section}[left]{above}{before with label}{before without label}{filler and page}[after]
\titlecontents{part}[20mm]{ }{\contentslabel{50pt}}{\hspace{-50pt}}{\titlerule*[10pt]{.}\contentspage}[\vskip6pt{\pagebreak[3]}]
\titlecontents{chapter}[20mm]{ }{\contentslabel{50pt}}{\hspace{-50pt}}{\titlerule*[10pt]{.}\contentspage}[\vskip6pt{\pagebreak[1]}]
\titlecontents{section}[20mm]{ }{\contentslabel{36pt}}{\hspace{-36pt}}{\titlerule*[10pt]{.}\contentspage} [\vskip6pt{\pagebreak[1]}]
\titlecontents{subsection}[20mm]{ }{\contentslabel{36pt}}{\hspace*{-8mm}}{\titlerule*[10pt]{.}\contentspage}[\vskip6pt{\pagebreak[1]}]
\pagenumbering{roman}

\endinput\chapter{中文環境配置}

由於 \LaTeX\ 本身並不支持中文排版，所以我們需要額外使用 package 來使 \LaTeX\ 認識中文。

\section{Pdf\LaTeX\ + CJK}

在 Preamble 中加入\verb|\usepackage{CJKutf8}|並且在需要使用到中文的部分使用\verb|\begin{CJK}{UTF-8}{字體}| ..... \verb|\end{CJK}|就可以使用中文了，下面有一個小小的範例

\begin{tcblisting}{listing only}
\usepackage{CJKutf8}
% bsmi = 明體
% bkai = 楷書
\begin{CJK}{UTF-8}{bsmi}
這裡就可以用中文了喔
\end{CJK}
\end{tcblisting}

但這種方法可以使用的中文字體必須是 \TeX\ 發行版自帶的中文字體，在字體的選擇上有一定的局限性。

\section{\XeLaTeX\ + fontspec 的土炮用法}

在 \XeLaTeX\ 的環境下使用 fontspec package 並用\verb|\newfont\swich{Font}|宣告新的字體，然後就可以在文本區中需要中文的地方用\verb|{\swich 中文}|的方式打出中文了，但這樣 \LaTeX\ 會用英文排版的邏輯來進行排版，在許多小細節難免會不盡人意，所以並不建議這樣使用。

\section{\XeLaTeX\ + CTeX}

CTeX 是一套由中國人開發的巨集，但其實他本身並不提供中文支持，只是它會幫你根據你的編譯引擎設定好巨集，除此之外 CTeX 還一並提供了符合中文排版的文件格式、預先定義好的中文字體，但不知道為什麼，這個 package 對 Mac OS 的兼容性並不好。

\begin{tcblisting}{listing only}
\documentclass[•]{•}
\usepackage{ctex}
\begin{document}
我可以用中文了
\end{document}
\end{tcblisting}

\begin{tabular}{cc}
\hline
名稱 & 用途\\\hline\hline
ctexart & 簡單的幾頁文件\\\hline
ctexrep & 報告\\\hline
ctexbook & 書籍\\\hline
ctexbeamer & 投影片\\\hline
\end{tabular}

\section{\XeLaTeX\ + xeCJK}

這是 ctex 在 \XeLaTeX\ 的環境下使用的中文支持方案，是為排版簡體中文而開發的，所以在一些標點符號的處理上會不太符合繁體中文的要求。

\begin{tcblisting}{listing only}
\usepackage{xeCJK}%匯入巨集
\setCJKmainfont[可選參數]{字體名}%設置主要字體
\setCJKfallbackfont[可選參數]{字體名}%設置備用字體
\end{tcblisting}

\section{Lua\LaTeX\ + luatexja}

xeCJK 只能以 \XeLaTeX\ 編譯，在使用 Lua\LaTeX\ 的情況下無法使用 xeCJK，這時候可以改用由日本人研發的 luatexja。

\begin{tcblisting}{listing only}
%\documentclass[•]{•}
%加-fontspec 才可以設定字體
\usepackage{luatexja-fontspec}
\setmainjfont{Font}
%然後就可以使用中文了
\end{tcblisting}

\section{總結}

使 \LaTeX\ 支持中文的方法不只一種，可以依照自己的需求尋找最適合的方式，我推薦 \XeLaTeX\ + xeCJK 或 Lua\LaTeX\ + luatexja 的方式。
\chapter{化學}

\LaTeX\ 也能拿來排版化學相關的事物，但我們需要借用 mhchem 與 chemfig 的力量

\begin{tcblisting}{listing only}
\usepackage{mhchem}
\usepackage{chemfig}
\end{tcblisting}

\section{化學式 \& 化學反應式}

化學式與化學反應式利用 mhchem 提供的 \verb`\ce{}` 就可以達成了

\begin{tcblisting}{listing side text}
\ce{H2O}\\
\ce{H2O2}\\
\ce{NO-}
\end{tcblisting}

如果需要質量數可以用以下的方式

\begin{tcblisting}{listing side text}
\ce{^235_98U}\\
\ce{^2_1H}\\
\ce{^4_2He}
\end{tcblisting}

\verb`^` 代表上標 \verb`_` 代表下標，也可以打出分子內離子的氧化態

\begin{tcblisting}{listing side text}
\ce{Fe^{II}Fe^{III}2O4}
\end{tcblisting}

計量化學也可以利用相同的方式

\begin{tcblisting}{listing side text}
\ce{2H2O}\\
\ce{1/2H2O}\\
\ce{(1/2)H2O}\\
\ce{$n$H2O}
\end{tcblisting}

化學反應式只需要加入 \verb`+` 或 \verb`->` 等等就好了

\begin{tcblisting}{listing side text}
\ce{H2O2 -> H2O + O2}
\end{tcblisting}

如果涉及到沈澱或產生氣體可以利用單獨的 \verb`^` 跟單獨的小寫 v，可逆反應則更改箭頭的樣式即可

\begin{tcblisting}{listing side text}
\ce{^ v}\\
\ce{A <=> B}\\
\ce{CaCO_3 + HCl <=> CaCl_2 v + H_2O + CO_2 ^}
\end{tcblisting}

如果需要加催化劑，可以用箭頭後加中括號的方式達成

\begin{tcblisting}{listing side text}
\ce{A ->[text above][text below] B]}\\
\ce{H2O2 ->[MnO2] H2O + O2 ^}\\
$\ce{x Na(NH4)HPO4 ->[\Delta] (NaPO3)_x + x NH3 ^ + x H2O}$
\end{tcblisting}

下圖是 mhchem 可以使用的箭頭種類

\section{結構式}

結構式需要借助 chemfig 提供的 \verb`\chemfig{}` 命令

\begin{tcblisting}{listing side text}
\chemfig{H-O-H}
\end{tcblisting}

你可能會想要調整角度，在 \verb`-` 後加[]可以解決這個問題，chemfig 可以接受預設角度、絕對角度與相對角度的輸入，預設角度就直接在括號內加入數字，預設是 0 ，之後每增加 1 角度增加 45 度，絕對角度需要在數字前加入\verb`:`，相對角度則是加入\verb`::` 

\begin{tcblisting}{listing side text}
\chemfig{A-[1]-[2]-[3]-[4]-[5]-[6]-[7]-[8]}
\chemfig{A-[:45]-[:90]-[:135]-[:180]-[:225]-[:270]-[:315]-[:360]}
\chemfig{A-[::+45]-[::+45]-[::+45]-[::+45]-[::+45]-[::+45]-[::+45]-[::+45]}
\end{tcblisting}

如果想要畫多邊形可以利用下面的技巧

\begin{tcblisting}{listing side text}
\chemfig{C*5(-A-B-C-D-E-F)}\\
\chemfig{[:18]C*5(-A-B-C-D-E-F)}
\end{tcblisting}

如果你真的想做點什麼複雜的東西，我建議你可以參考奈米小人。
\chapter{\LaTeX\ 基礎}

\section{Hello World!}

在 \LaTeX\ 中輸出 Hello World 是一件非常簡單的事情，首先先創建一個名叫 Hello World.tex 的檔案，並在檔案中打入以下程式碼：

\begin{tcblisting}{listing only}
\documentclass{article}
\begin{document}
Hello World!
\end{document}
\end{tcblisting}

接者使用 pdf\LaTeX, \XeLaTeX\ 或 Lua\LaTeX\ 編譯，再點開 Hello World.pdf 即可。

\section{\LaTeX  工作流程}

在剛剛編譯過 Hello World.tex 後，你會發現多出來的檔案不只有 pdf輸出，還會有一些其他的檔案出現，這些檔案的出現是因為 \LaTeX\ 的工作流程所需，下圖是基礎的 \LaTeX\ 工作流程：

\begin{figure}[htb]
\centering
\begin{tikzpicture}
\node(Format) at(-3,1) {格式};
%\node(Class) at(-3,0) {文件 Class};
\node(Package) at(-3,-1) {文件};
\node(Engine) {編譯引擎};
\node(aux) at (0,1) {.aux, .out, .toc};
\node(log) at (0,-1) {.log};
\node(pdf) at (3,0) {.pdf};
\draw[->] (Format)--(Engine);
%\draw[->] (Class)--(Engine);
\draw[->] (Package)--(Engine);
\draw[<->] (aux)--(Engine);
\draw[->] (Engine)--(log);
\draw[->] (Engine)--(pdf);
\end{tikzpicture}
\end{figure}

在一開始 \LaTeX\ 會先載入格式文件，再開始處理原始檔，途中 \LaTeX\ 會創建 .aux, .out, .toc 檔來儲存引用資料，並且會將編譯過程記錄成 .log 檔，最後產生 pdf 檔，所以看到這一堆的檔案不要驚慌，這只是 \LaTeX\ 正在進行他的工作的象徵而已。

\section{導言區}

導言區指的是檔案內 \verb|\begin{document}| 前的部分，通常我們會在這裡引入需要的 package、選擇文件的類別、定義一些需要的參數、命令，你可以簡單的理解為定義模板，或理解為 HTML 的 \verb|<head>| 標籤。

\begin{tcblisting}{listing only}
%導言區
\begin{document}
%文本區
\end{document}
\end{tcblisting}

在導言區下列兩個命令是最為重要的

\begin{itemize}
\item \verb|\documentclass[]{}|
\item \verb|\usepackage{}|
\end{itemize}

前者是決定文件的類別，後者是使用巨集，下表是 \LaTeX\ 內建的的文件類別：

\begin{tabular}{cc}
\hline
文件類別 & 用途 \\\hline\hline
article & 短文章 \\\hline
report & 多章節的長報告 \\\hline
book & 書籍 \\\hline
beamer & 簡報 \\\hline
\end{tabular}

不同的文件類別之間會有排版細節上的差異，在切換不同的穩健類別之前請先詳讀該文件類別的說明。

\section{文本區}

文本區才是正文內容的所在，文章上會顯示的內容都會這區的文字與命令經過處理後產出的。

\subsection{標題與目錄}

在 \LaTeX\ 預定義的文件類別中，有以下幾種的標題格式被預定義好，只要使用這些命令，就可以利用 \verb|\tableofcontent| 建立目錄，也可以利用 \verb|\listoffigre| 與 \verb|\listoftable| 來建立圖目錄與表目錄：

\begin{tabular}{ccc}
\hline
名稱|說明|深度 \\\hline\hline
\verb|\part{}| & 部 & -1 （在 article 為 0）\\\hline
\verb|\chapter{}| & 章 & 0（在 article 中未被定義）\\\hline
\verb|\section{}| & 節 & 1 \\\hline
\verb|\subsection{}| & 小節 & 2 \\\hline
\verb|\subsubsection{}| & 小小節 & 3 \\\hline|
\verb|\paragraph{}| & 段 & 4 \\\hline
\verb|\subparagraph{}| & 小段 & 5 \\\hline
\end{tabular}

深度在 \LaTeX\ 文件類型的定義中是用來決定該不該被 \verb|\tableofcontent| 編入目錄的，以下有一些有關的指令：

\begin{tcblisting}{listing only}
\setcounter{tocdepth}{2}%設定深度

\section*{}%只要加一個星號就會不編號也不編入目錄

\addcontentsline{toc/lof/lot}{層級}{名稱}%將未編入目錄的標題標入目錄
\end{tcblisting}

需要注意在 \verb|\addcontentsline| 後的 toc, lof, lot 分別代表了目錄、圖目錄、表目錄，圖目錄與表目錄分別可被 \verb|\listoffigures| 與 \verb|\listoftables| 給列印出來。\chapter{交叉引用}

在寫文章時，如果遇到要引用到文章前面的狀況往往是最讓人頭疼的，因為只要文章一被改過，你就很有可能需要將後面引用到的部分全部修改過，幸好 \LaTeX\ 針對這個問題提供了 \verb|\label{}\ref{}\pageref{}| 這三個指令，拯救我們脫離水深火熱之中。

\section{引用章節}

\verb`\label{}` 顧名思義就是在文章中放入一個標籤，等到需要時再利用\verb`\ref{}` 或 \verb`\pageref{}` 來引用

\begin{tcblisting}{}
\section*{原子說}\label{sec:Atomic Theory1}
假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文

\section*{定比定律}
根據第\ref{sec:Atomic Theory1}章的內容⋯⋯
\end{tcblisting}

如果你想把頁碼一起含進去，可以使用\verb`\pageref{}`來完成

\begin{tcblisting}{}
\section*{原子說}\label{sec:Atomic Theory2}
假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文

\section*{定比定律}
根據第\pageref{sec:Atomic Theory2}頁第\ref{sec:Atomic Theory2}章的內容⋯⋯
\end{tcblisting}

\section{引用表格 ＆ 引用圖片 ＆ 引用方程式}

想要引用這三種元素很簡單，只需要將 \verb`\label{}` 放入環境之中即可

\begin{tcblisting}{listing only}
\begin{figure}[h]\label{fig:1}
\includegraphics[draft,scale = 0.05]{Triangle.png}
\end{figure}
圖\ref{fig:Triangle}是一個三角形\\
方程式（\ref{eq:1}）是畢氏定理
\end{tcblisting}

\begin{tcblisting}{}
\begin{tabular}{|c c c|}
\hline
$\theta^\circ$ & $\sin(\theta^\circ)$ & $\cos(\theta^\circ)$\\
\hline
$30^\circ$ & $\frac{\sqrt{3}}{2}$ & $\frac{1}{2}$\\
$45^\circ$ & $\frac{\sqrt{2}}{2}$ & $\frac{\sqrt{2}}{2}$\\
$60^\circ$ & $\frac{1}{2}$ & $\frac{\sqrt{3}}{2}$\\
\hline
\label{tab:sin}
\end{tabular}

表\ref{tab:sin}是角度與$\sin, \cos$值的關係表

\begin{equation}
\label{eq:1}
a^2 + b^2 = c^2
\end{equation}
方程式（\ref{eq:1}）是畢氏定理
\end{tcblisting}

需要注意的是如果環境內有 \verb`\caption{}` 命令，建議將 \verb`\label{}` 命令放在 \verb`\caption{}` 後。

\section{其他元素}

如果你想要引用的是自定義的編號環境，引用方式就如同引用 \LaTeX\ 內建的環境一樣，但如果你想要引用的元素並不是以上這幾種，那你可以考慮直接用\verb`\pageref{}` 引用頁碼。

\section{超連結}

你會注意到引用雖然好用，但沒有辦法點下去前往被引用的元素，這時後我們可以利用 \verb`hyperref` 這個 package 來救場。

\begin{tcblisting}{}
\section*{原子說}\label{sec:Atomic Theory3}
假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文假文

\section*{定比定律}
根據第\pageref{sec:Atomic Theory3}頁第\ref{sec:Atomic Theory3}章的內容⋯⋯
\end{tcblisting}

你可以看到在 \verb`\pageref{}` 產生的數字上出現了紅匡，且點下去會前往被引用的區段，但除了這之外，hypperef 也提供了 \verb`\href{連結}{顯示文字}` 與 \verb`\url{連結}` 來在文件中插入超連結

\begin{tcblisting}{listing side text}
\href{https://www.overleaf.com}{Overleaf}\\
\url{https://www.overleaf.com}
\end{tcblisting}

如果你不喜歡連結被紅匡包起來，可以利用\verb`\hypersetup{}`來更改

\begin{tcblisting}{listing side text}
\hypersetup{hidelinks}
\href{https://www.overleaf.com}{Overleaf}\\
\url{https://www.overleaf.com}
\end{tcblisting}

這裡有可以更改的參數

\begin{tabular}{ccc}
\hline
參數 & 含義 & 值 \\\hline\hline
linkcolor & 內部連結顏色 & 顏色名字 \\\hline
urlcolor & 超連結顏色 & 顏色名字 \\\hline
colorlinks & 是否幫連結上色 & 布林值 \\\hline
breaklinks & 是否允許連結換行 & 布林值 \\\hline
\end{tabular}\chapter{列表與表格}

\section{列表}

在 \LaTeX\ 中有三種不同的列表環境， 分別是 itemize, enumerate 與 description，這三個在使用上除了輸出結果不同外，其他都是完全相同的。

\subsection{itemize}

itemize 是最簡單的列表環境

\begin{tcblisting}{listing side text}
\begin{itemize}
\item 第一點
\item 第二點
\item 第三點
\end{itemize}
\end{tcblisting}

只要在環境中利用 \verb|\item| 就可以放置項目符號，如果想要自訂項目符號，只需要像 \verb|\item[]| 這樣指定即可

\begin{tcblisting}{listing side text}

\begin{itemize}
\item 第一點
\item[\$]第二點
\item[\#]第三點
\end{itemize}
\end{tcblisting}

可以看到第二點與第三點的項目符號換成了 \$\ 與 \# ，也可以將項目符號換成數字

\begin{tcblisting}{listing side text}
\begin{itemize}
\item[1]第一點
\item[2]第二點
\item[2]第三點
\end{itemize}
\end{tcblisting}

但通常不會有人這樣做，因為可以靠下一個要介紹的列表環境來達成類似的事情。

\subsection{enumerate}

如同上一段所說，enumerate 的項目符號是連續的數字，如果需要列出有順序的列表，可以考慮使用這個環境。

\begin{tcblisting}{listing side text}
\begin{enumerate}
\item 第一點
\item 第二點
\item 第三點
\end{enumerate}
\end{tcblisting}

如果想要在一個大項目下細分出子項目，可以在 enumerate 環境中再使用一次 enumerate 環境

\begin{tcblisting}{listing side text}
\begin{enumerate}
\item 第一點
\begin{enumerate}
\item 第一小點
\item 第二小點
\item 第三小點
\end{enumerate}
\item 第二點
\item 第三點
\end{enumerate}
\end{tcblisting}

\subsection{description}

description 環境比較像在說明某些事物時會用到的環境，在使用 \verb|\item |時如果沒有指定項目符號，就會像下圖所示一般

\begin{tcblisting}{listing side text}
\begin{description}
\item 什麼都沒有？
\item 什麼都沒有！
\item 什麼都沒有。
\end{description}
\end{tcblisting}

可以看到原本該有項目符號的地方什麼都沒有，但如果項目符號有被指定，就不會像上面什麼都沒有

\begin{tcblisting}{listing side text}
\begin{description}
\item[項目符號] 有東西了？
\item[項目符號] 有東西了！
\item[項目符號] 有東西了。
\end{description}
\end{tcblisting}

這樣的特性讓他可以用在論文中的符號說明或名詞解釋的地方

\begin{tcblisting}{listing side text}
\begin{description}
\item[符號] 解釋
\item[符號] 解釋
\item[符號] 非常非常非常非常長的解釋
\end{description}
\end{tcblisting}

除此之外，這些列表環境也可以混用，例如下面的例子

\begin{tcblisting}{listing side text}
\begin{enumerate}
\item 某化學物質
\begin{itemize}
\item 物理性質
\begin{description}
\item[性質] 解釋
\item[性質] 解釋
\item[性質] 解釋
\end{description}
\item 化學性質
\begin{description}
\item[性質] 解釋
\item[性質] 解釋
\item[性質] 解釋
\end{description}
\end{itemize}
\end{enumerate}
\end{tcblisting}

可以看到這是一個比較複雜的例子。

\section{表格}

想要在 \LaTeX\ 中使用表格需要利用 tabular 環境

\begin{tcblisting}{listing side text}
\begin{tabular}{| c | l r |}
\hline
第一欄 & 第二欄 & 第三欄 \\
\hline
\end{tabular}
\end{tcblisting}

\begin{itemize}
\item 在 \verb|\begin{tabular}| 後的花括號中指定的是欄位及對齊方式，| 是代表在這兩欄之間要有分隔線，c, l, r 分別代表置中、置左、置右對齊
\item \verb|\hline| 是讓 LaTeX 畫一條橫線
\item \& 是跳到下一欄的的符號
\item \verb|\\| 是告訴 LaTeX 這一行結束了，要跳到下一行。
\end{itemize}

如果想指定欄寬可以用 p\{寬度\} 的方式，但在這種情況下預設是置左對齊

\begin{tcblisting}{listing side text}
\begin{tabular}{|p{1cm}|p{2cm}|}
\hline
一公分 & 兩公分 \\
\hline
\end{tabular}
\end{tcblisting}

但要直接這樣使用會有許多問題，所以我們要將表格放進 table 環境內，原因是在下一篇有提到的浮動體

\begin{tcblisting}{listing only}
\begin{table}
\begin{tabular}{| c | l r |}
\hline
第一欄 & 第二欄 & 第三欄 \\
\hline
\end{tabular}
\end{table}
\end{tcblisting}\chapter{字體與字型}

來到了第八天，本篇要講的是 \LaTeX\ 的字體與字型的設定。

\section{字型}

\subsection{字體大小}

\LaTeX\ 預設內文字體是 10pt 並提供了 11 \& 12 pt 可供使用，並且 \LaTeX\ 有預設一些字體大小

\begin{tabular}{ccccc}
\hline
環境 & swich & 10pt & 11pt & 12pt \\\hline\hline
\verb|\begin{tiny}| & \verb|\tiny|  & 5pt & 6pt & 6pt \\\hline
\verb|\begin{scriptsize}| & \verb|\scriptsize| & 7pt & 8pt & 8pt \\\hline
\verb|\begin{footnotesize}| & \verb|\footnotesize| & 8pt & 9pt & 10pt \\\hline
\verb|\begin{small}| & \verb|\small| & 9pt & 10pt & 11pt \\\hline
預設大小 & \verb|\normalsize| & 10pt & 11pt & 12pt \\\hline
\verb|\begin{large}| & \verb|\large| & 12pt & 12pt & 14pt \\\hline
\verb|\begin{Large}| & \verb|\Large| & 14pt & 14pt & 17pt \\\hline
\verb|\begin{LARGE}| & \verb|\LARGE| & 17pt & 17pt & 20pt \\\hline
\verb|\begin{huge}| & \verb|\huge| & 20pt & 20pt & 25pt \\\hline
\verb|\begin{Huge}| & \verb|\Huge| & 25pt & 25pt & 25pt \\\hline
\end{tabular}

如果想要使用特殊的字體大小可利用 \verb|\fontsize{font size}{line skip}| 來宣告特殊的字號，要注意的是在這個命令後需要補上\verb|\selectfont| 使用宣告的字號。


\subsection{粗體}

使用\verb|\textbf{your word}|或\verb|\bfseries| 來改變字體粗細

\begin{tcblisting}{sidebyside}
\textbf{Bold} or {\bfseries Bold}
\end{tcblisting}

\subsection{斜體}

使用\verb|\textit{your word}|或\verb|\itshape|來更改文字傾斜。

\begin{tcblisting}{sidebyside}
\textit{italic} or {\itshape italic}
\end{tcblisting}

\subsection{強調}

使用\verb|\emph{Important}|即可

\begin{tcblisting}{sidebyside}
VERY VERT \emph{IMPORTANT}
\end{tcblisting}

\section{字體}

由於 \LaTeX\ 支持的字體技術過於久遠，於是這裡所要教學的是在 \XeLaTeX\ 與 Lua\LaTeX 的環境下可以用的技巧

\subsection{在 xeCJK 上}

在 xeCJK 中可以利用\verb|\setCJKmainfont[font features]{font}|來設定主要字體，也可以利用\verb|\newCJKfontfamily|\verb|[family]|\verb|\swich{font}|\verb|[font features]|(family 可不指定，不指定時 family 等同於switch)來聲明新的字族。

\begin{tcblisting}{listing only}
\setCJKmainfont{TW-Kai}
\newCJKfontfamily\sung{TW-Sung}

標楷體、\sung 宋體
\end{tcblisting}

\subsection{在 luatexja 上}

在 luatexja 也是一樣，使用\verb|\setmainjfont| 與\verb|\newjfontfamily|

\begin{tcblisting}{listing only}
\setmainjfont{TW-Kai}
\newjfontfamily\sung{TW-Sung}

標楷體、\sung 宋體
\end{tcblisting}\chapter{自定義}

在 \LaTeX\ 中有以下幾種自定義命令、環境的方法

\begin{itemize}
\item \verb|\newcommand{cmd}[必選參數]{definition}|
\item \verb|\renewcommand{cmd}[必選參數]{definition}|
\item \verb|\newenvironment{env}[必選參數]{before env}{after env}|
\item \verb|\renewenvironment{env}[必選參數]{before env}{after env}|
\end{itemize}

\section{自定義命令}

\verb|\newcommand| 是拿來自定義命令的，而\verb|\renewcommand| 則是重新定義現有命令的

\begin{tcblisting}{listing side text}
\newcommand{\important}[1]{\textcolor{yellow}{#1}}
\important{Important}
\end{tcblisting}

在上述例子中，第一個花括號是命令，中間的中括號是必選參數的數量，最後一個花括號是命令的定義，這裡是利用了上一篇提到的 \verb|\textcolor| 將字體顏色變為黃色的，而 \verb|#1| 則是代表第一個可選參數。

\section{自定義環境}

\verb|\newenvironment| \& \verb|\renewenvironment |與\verb|\newcommand| \& \verb|\renewcommand |的思維一樣，只不過命令要改成環境：

\begin{tcblisting}{sidebyside}
\newenvironment{highlight}{\begin{Large}\color{red}\bfseries}{\end{Large}}
\begin{highlight}
被特別強調的文字
\end{highlight}
\end{tcblisting}

\section{自定義編號環境}

如果想要讓環境編號就必須利用 \verb|\newcounter{名稱}{父計數器}| 定義一個新計數器，在使用 \verb|\newcounter| 定義一個新計數器後，\LaTeX\ 會自動生成 \verb|\the名稱|的命令儲存計數器的值。

\begin{tcblisting}{listing side text}
\newcounter{example}
\theexample
\end{tcblisting}

可以用 \verb|\setcounter{計數器}{值}| 來設定計數器的值

\begin{tcblisting}{listing side text}
%\newcounter{example}
\setcounter{example}{40}
\theexample
\end{tcblisting}

可以用 \verb|\stepcounter| 或 \verb|\refstepcounter| 將計數器的值加一，兩者的區別在 \verb|\refstepcounter| 增加的值可以被 label 或 ref 等命令使用。

\begin{tcblisting}{listing side text}
%\newcounter{example}
第一次試驗\theexample ，\refstepcounter{example} refstepcounter 之後\theexample \end{tcblisting}

範例：

\begin{tcblisting}{listing side text}
%\newcounter{example}
\newenvironment{example}{\refstepcounter{example}\textbf{\large Example \theexample.}\medskip}{\\}
\begin{example}
模擬環境一
\end{example}
\begin{example}
模擬環境二
\end{example}
\begin{example}
模擬環境三
\end{example}
\end{tcblisting}
\section{保留字符}
下表為 \LaTeX\ 中的保留字符：

\begin{footnotesize}
\begin{tabular}{llll}
\hline
保留字符 & 用途 & 文檔中使用 & 替代指令 \\\hline\hline
\verb|\| & 所有命令的開頭 & \verb|$\backslash$| & \textbackslash \\\hline
\{ & 開始一個分組 & \verb|\{| & \verb|\textbraceleft| \\\hline
\} & 結束一個分組 & \verb|\}| & \verb|\textbraceright| \\\hline
\$ & 進入數學模式 & \verb|\$| & \verb|\textdollar| \\\hline
\% & 下註解 & \% & NA  \\\hline
\# & 定義巨集 & \# & NA \\\hline
\& & 表格中的換格標示 & \verb|\&|  & NA \\\hline
\verb|_| & 數學模式下產生下標字 & NA & \verb|\_| \\
\hline
\verb|^| & 數學模式下產生下標字 & NA & \verb|\&| \\\hline
\verb|~| & 產生一個空白（禁止斷行） & NA & \verb|\textasciitilde| \\\hline
\end{tabular}
\end{footnotesize}

大部分的保留字符都可以藉由加一個反斜槓的方式輸出，但唯有反斜槓不行（單個反斜槓是產生空白、兩個反斜槓加在一起是強制換行）只能使用指令 \verb|\textbackslash| 來輸出。

\subsection{分組}

分組是 LaTeX 中的一個概念，可以將其類比為一個 HTML 的 \verb|<p>| 標籤，通常用來限定命令的作用範圍，使用方式也很簡單，就是將想讓命令作用的範圍用\{包起來即可\}，範例如下：

\begin{tcblisting}{sidebyside}
%\large 更改字型大小
{\large A}A
\end{tcblisting}

\section{命令與環境}

命令與環境的差別差在哪裡？你可以將命令理解為由反斜槓開始直到數字、保留字符或空白的字串，將環境理解為被 \verb|\begin{環境}| ......\verb|\end{環境}| 包裹著的區塊，而實際上環境更像是將開啟一個分組與一連串命令加在一起。

\begin{tcblisting}{sidebyside}
%以下兩種方式在編譯後都會得到一樣的結果
{\large 放大}
\begin{large}放大\end{large}
\end{tcblisting}

\subsection{假空白}

LaTeX 的命令有可分為兩種有參數與沒參數的，通常可選參數會被 \verb|[]| 包圍起來並置於被 \verb|{}| 包圍起來的的必選參數前。前面提到命令只會在遇到數字、保留字符或空白才會被視為一個整體，這就會導致一個問題，像 \verb`\LaTeX` 這樣沒有必選參數的命令後面必須要接一個空白，但這個空白會被 \LaTeX 忽略掉，導致下面的情況

\begin{tcblisting}{sidebyside}
\LaTeX and Something.
\end{tcblisting}

以下有兩個可以解決這個問題的方法

\begin{tcblisting}{sidebyside}
\LaTeX{} and Something.%在命令後接花括號

\LaTeX\ and Something.%在命令之後接反斜槓
\end{tcblisting}

\section{處理錯誤}

LaTeX 的錯誤有下列三種

\begin{itemize}
\item warning
\item badbox
\item error
\end{itemize}

第一種是 warning 代表發生了錯誤但並不影響、或不太影響排版結果的問題上，通常這種回去翻 log 檔都會有一些建議，不過不解決也不會什麼大事情發生。

badbox 是 \LaTeX\ 的一個特殊的錯誤類型，這個錯誤類型是來自於 \LaTeX\ 認為排版產出的結果不美觀，而給出的警告，在這類的警告後面通常還會有 badness 來描述到底有多糟糕。

error 則與 warning 相反，其足以使編譯過程停止或導致奇怪的結果，遇到這種問題建議直接向他人詢問，並請附上原始檔與 log 檔的紀錄，以便他人快速釐清問題所在。\chapter{版面配置}

\section{一些內建的處理}

以下是 \LaTeX\ 的文件類別內建的版面配置

\begin{tabular}{cc}
\hline
選項 & 含義 \\\hline\hline
a4paper & 設定紙張大小為a4 \\\hline
a5paper & 設定紙張大小為a5 \\\hline
twoside & 雙面模式 \\\hline
twocolumn & 雙欄模式 \\\hline
landscape & 將紙張旋轉90度 \\\hline
參數 & 含義 \\\hline
paperheight & 紙張高度 \\\hline
paperwidth & 紙張寬度 \\\hline
\end{tabular}

選項只需要放在 \verb|\documentclass[]{}| 的中括號內即可，但下面的參數需要利用 \verb|\setlength{參數}{數值}| 的方式修改。

\begin{tcblisting}{listing only}
\documentclass[a4paper,landscape]{article}
and
\setlength{\paperheight}{value}
\setlength{\paperwidth}{value}
\end{tcblisting}

\section{邊界}

邊界可以利用 geometry package 來設定

\begin{tcblisting}{listing only}
\usepackage[key1=value, key2=value]{geometry}
or
\usepackage{geometry}
\geometry{key1=value, key2=value}
\end{tcblisting}

下表有一些常用的 key

\begin{tabular}{cc}
\hline
Key & 含義 \\\hline\hline
top & 上邊界 \\\hline
bottom & 下邊界 \\\hline
left & 左邊界 \\\hline
right & 右邊界 \\\hline
outter & 雙頁模式下的右側邊界 \\\hline
inner & 雙頁模式下的右側邊界 \\\hline
\end{tabular}

\section{各種距離}

在\LaTeX\ 中有許多距離決定了文字的位置，以下是這篇要介紹的距離：

\begin{itemize}
\item parskip
\item parindent
\item baselineskip
\item lineskip
\end{itemize}

\subsection{parskip}

parskip 是指 \LaTeX\ 在兩個段落中加入的空白

\begin{tcblisting}{sidebyside}
\lipsum[][50]

\lipsum[][50]

\parskip 2cm \lipsum[][50]

\lipsum[][50]
\end{tcblisting}

可以看到段落間的距離變了

\subsection{parindent}

parindent 是指段落前的縮進

\begin{tcblisting}{sidebyside}
\setlength{\parindent}{15pt}

\lipsum[][50]

\setlength{\parindent}{30pt}

\lipsum[][50]
\end{tcblisting}

但 \LaTeX\ 會將標題後的段落視為引言，引言是不會縮排的，可以載入 indentfirst package 讓引言縮排。

\subsection{baselineskip \& lineskip}

這是跟行距有關的兩個選項，baselineskip 是指兩行字基線的距離，是透過 $\text{font size} \times 1.2 \times \text{linespread\{value\}}$ 得出的，若要在文本區內更改，需要使用 \verb|\selectfont| 命令。

\begin{tcblisting}{sidebyside}
\setlength{\baselineskip}{12pt}\selectfont
AAAAAA

AAAAAA
\setlength{\baselineskip}{24pt}\selectfont
AAAAAA

AAAAAA
\end{tcblisting}

lineskip 則是在上下兩條基線超過 baselineskip 時兩行之間的距離，
如果要調整行距，建議使用 setspace package 提供的 \verb|\singlespacing| \verb|\onehalfspacing| \verb|\doublespacing| 命令，或者利用 \verb|\linespread{vaule}| 設定行距。

\section{頁首、頁尾}

頁首頁尾可以藉由 fancyhdr 這個 package 來自定義，它提供了 fancyhead 與fancyfoot 與一些可選參數來協助我們定義頁首與頁尾。

\begin{tcblisting}{listing only}
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhead[L,C,R]{ }%將頁首頁尾清空
\fancyfoot[L,C,R]{ }
\fancyhead[L]{書籍名稱}%將書籍名稱放在左頁首
\fancyhead[R]{\thepage}%將頁碼放在右頁首
\renewcommand{\headrulewidth}{0.4pt}%調整頁首下的橫線寬度
\end{tcblisting}

上面是一個簡單的範例，\verb|\fancyhead| 是調整頁首，\verb|\fancyfoot| 是調整頁尾，可選參數L, C, R 分別代表了左中右三個位置，而除了這三個參數外，我們還可以利用 O, E 這兩個參數來為奇數與偶數頁定義不同的頁首與頁尾：

\begin{tcblisting}{listing only}
\pagestyle{fancy}
\fancyhead[L,C,R]{ }%將頁首頁尾清空
\fancyfoot[L,C,R]{ }
\fancyhead[LO,RE]{書籍名稱}
\fancyhead[RO,LE]{\thepage}
\renewcommand{\headrulewidth}{0.4pt}%調整頁首下的橫線寬度
\end{tcblisting}

上面的範例將頁碼放在靠近書封的頁首，將書籍名稱放在遠離書封的頁首。我們還可以直接定義出一個 pagestyle 以在不同的情況使用：

\begin{tcblisting}{listing only}
\fancypagestyle{name}{%定義新的 pagestyle
\fancyhead[L,C,R]{ }
\fancyfoot[L,C,R]{ }
\fancyhead[LO,RE]{書籍名稱}
\fancyhead[RO,LE]{\thepage}
\renewcommand{\headrulewidth}{0.4pt}
}
\pagestyle{name}%使用新的 pagestyle
\end{tcblisting}

以上就是如何在 \LaTeX\ 中自定義頁首與頁尾了。\chapter{\LaTeX\ 簡介}

在第一章時，我們簡單的介紹了 \LaTeX\ 的歷史，而這一章是要介紹 \LaTeX\ 的背景知識，

\section{編譯引擎與格式}

\LaTeX\ 可以拆成兩個部分，一個是編譯引擎(Engine）一個是格式，格式在 \LaTeX\ 裡有介紹到，裡面將基本命令封裝成高級命令，且負責描述排版細節，而編譯引擎則是負責將這些排版細節轉成 PDF 的工作。

\subsection{編譯引擎}

編譯引擎是 \LaTeX\ 的基礎，因為格式是建立於編譯引擎所提供的基本命令上的，下表是一些編譯引擎，這些編譯引擎各有自己的特點：

\begin{itemize}
\item \TeX
\item pdf\TeX
\item \XeTeX
\item Lua\TeX
\item p\TeX \& up\TeX
\end{itemize}

\subsubsection{\TeX}

由高德納教授發明的，是目前所有編譯引擎的基礎，但只支持 ASCII 編碼，所以 CJK 文字無法利用 \TeX\ 來排版。

\subsubsection{pdf\TeX}

一開始 \TeX\ 只能產生 dvi 檔，如果需要 pdf 檔得使用 dvips + ps2pdf 或 dvipdf 等，用久了難免會覺的不方便，於是就有人對 \TeX\ 進行了改進，使 \TeX\ 能夠直接的產生 Pdf 檔，而這改進過的引擎就被命名為 pdf\TeX 。

\subsubsection{\XeTeX} 

隨著時代的進步，\TeX\ 並沒有消逝在歷史的洪流中，但對於日新月異的電腦科學來說，\TeX\ 所支持的字體技術及編碼過於的老舊，於是便開發了支持 Opentype, Truetype, Unicode 的 \XeTeX ，並可以直接調用系統字體。

\subsubsection{Lua\TeX}

後來有人希望可以在撰寫新的特性時可以不用寫死，於是就將 Lua 加進了 pdf\TeX\ 裏成為了 Lua\TeX ，Lua\TeX\ 可在文章中直接使用 Lua 來改變排版細節，也支持 Unicode 編碼及現代的字型技術。

\subsubsection{p\TeX \& up\TeX}

這算是一個比較特殊的分枝，在 \TeX\ 傳入日本後，因為 \TeX\ 本身不支持非拉丁語系的文字，於是日本人便將 \TeX\ 依照自己的需求改進，最終的產物就是原生支持日文的 p\TeX\ （但只支持特定編碼，up\TeX\ 才支持 unicode 編碼），除了原生支持日文外也支持豎排文章。

\section{發行版}

TeX 發行版可以說是將編譯引擎、格式與 Pacakge 都集中到一起的集合，通常我們不會單獨下載編譯引擎與格式，而是會直接下載發行版。我所知發行版有以下三種。

\begin{itemize}
\item TeX Live
\item MiKTeX
\item MacTeX
\end{itemize}

\subsection{TeX Live}

由 TUG（\TeX\ User Group）維護的發行版，可以說是目前最活躍的 \TeX\ 發行版，但我並不是使用這個發行版，關於使用方法可以參考使用手冊 \url{https://tug.org/texlive/doc.html}。

\subsection{MiKTeX}

MiKTeX 的設計理念是夠用就好（Just Enough \TeX ），一開始安裝時只需要下載基本的 Package 即可，隨後如果有缺失的 Package 便會在編譯時下載，如果你不想裝龐大的 \TeX\ 發行版可以考慮這個。

\subsection{MacTeX}

MacTeX 實際上是對 TeX Live 進行改造，加入許多對於 MacOS 系統的優化，適合想在 MacOS 上使用 \TeX\ 卻又不想搗鼓太多的人。

\section{編輯器}

編輯器說穿了就是文本編輯器，如果你對於 \LaTeX\ 非常熟悉，不用下載特別的編輯器也可以進行 \LaTeX\ 的撰寫。不過想當然的，專門為 \LaTeX\ 開發的編譯器一定能讓你事半功倍。

\subsection{texmaker}

texmaker 是我目前使用的編輯器，他是專門為 \LaTeX\ 開發的自由軟體，所以他對 \LaTeX\ 的支持相當的好，不只有自動補全命令，還可以整理出 \LaTeX\ 編譯過程中的問題，讓你可以一邊查看原始碼一邊查看問題。

\subsection{Vimtex}

或你是 Vim 的忠實愛好者。

當然，想用什麼編輯器是你的自由，只要他對你來說是方便的就好了。\chapter{圖片}

\LaTeX\ 本身是不能處理圖片的，所以我們需要借用 graphicx 來讓 \LaTeX\ 處理圖片，其實還有另一個可以處理圖片的 package 叫 graphics ，他們兩個像是同一個 package 但用著不同的 interface ，兩個除了可選參數的形式之外，不論是命令還是必選參數都一樣。在這裡介紹的是 graphicx ，如果想要使用 graphics 請參考說明文件

\section{基礎}

只要使用\verb|\includegraphics{檔案}|就可以將圖片導入文件中了

\begin{tcblisting}{listing side text}
\includegraphics[scale=0.25, draft]{test.png}
\end{tcblisting}

但這樣會有一個問題，如果今天圖片與 tex 檔不在同一層目錄下就找不到，圖片少的時候還好，但只要圖片一多再加上 \LaTeX\ 編譯時產生的中間文件就足以將你淹沒在茫茫檔案之中，萬幸的是可以利用\verb|\graphicspath{目錄}|來指定圖片檔案的位置。

\begin{tcblisting}{listing only}
\graphicspath{{jpg/}{png/}}
\end{tcblisting}

這樣 \LaTeX\ 就會自動搜尋 jpg 跟 png 的子目錄了，你可以利用以下的可選參數來調整圖片

\begin{tabular}{cc}
\hline
參數 & 含義 \\\hline\hline
scale & 圖片縮放 \\\hline
width & 圖片寬度 \\\hline
height & 圖片高度 \\\hline
page & 如果是插入多頁pdf，要插入第幾頁 \\\hline
draft & 啟動草稿模式 \\\hline
\end{tabular}

\begin{tcblisting}{listing side text}
\includegraphics[scale=0.05, draft]{test.png}\\
\includegraphics[scale=0.15, draft]{test.png}\\
\includegraphics[scale=0.25, draft]{test.png}\\
\includegraphics[scale=0.25, draft]{test.png}
\end{tcblisting}

\subsection{其他使用}

除了圖片外 graphicx 也提供了以下指令

\begin{itemize}
\item \verb|\rotatebox{角度}{文字}|
\item \verb|\scalebox{水平縮放}[垂直縮放]{文字}|
\item \verb|\reflectbox{文字}|
\end{itemize}

\begin{tcblisting}{listing side text}
\rotatebox{0}{文字}\\
\rotatebox{90}{文字}\\
\rotatebox{180}{文字}\\
\rotatebox{270}{文字}\\
\end{tcblisting}

第一個 \verb|\rotate{}{}| 顧名思義就是旋轉文字，第二個 \verb|\scalebox{}[]{}| 可以將文字做兩個不同方向的縮放，第三個 \verb|\reflectbox{}|則是讓文字左右翻轉，實際上可以看成 \verb|\scalebox{-1}[1]{文字}|的簡寫

\begin{tcblisting}{listing side text}
\scalebox{1}[1]{文字}\\
\scalebox{2}[1]{文字}\\
\scalebox{1}[2]{文字}\\
\scalebox{2}[2]{文字}\\
\scalebox{-1}[1]{文字}\\
\reflectbox{文字}
\end{tcblisting}

\section{浮動體環境}

按著以上的方式用了一段時間後，你可能會發現這樣產出的結果並不好看，這時只要將圖片放進 figure 環境即可，\LaTeX\ 就會自動幫挑選好位置插入圖片了

\begin{tcblisting}{listing only}
\begin{figure}
\includegraphics[scale=0.5]{test.png}
\end{figure}
\end{tcblisting}

你會發現插入圖片的位置跟程式碼的位置不太一樣，這是因為 \LaTeX\ 會自動決定他認為好看的位置，而不是我們想要的位置，這時候可以在 \verb|\begin{figure}[]|後的方括號加入參數

\begin{tabular}{cc}
參數  & 含義 \\\hline\hline
 h  & 將圖片放在這裡（不一定跟程式碼一樣，但會相近） \\\hline
 t  & 放在頁面頂部 \\\hline
 b  & 放在頁面底部 \\\hline
 p  & 為圖片單獨開一頁 \\\hline
 !  & 覆蓋 LaTeX 預設用來決定「好」位置的參數 \\\hline
\end{tabular}

\begin{tcblisting}{listing only}
\begin{figure}[h]
\includegraphics[scale=0.5]{test.png}
\end{figure}
\end{tcblisting}

\subsection{文繞圖}

如果你想要達成文繞圖的效果，需要借助 wrapfig package 提供的 wrapfig 環境：

\begin{tcblisting}{listing only}
%\begin{wrapfigure}{位置}{寬度}
\begin{wrapfigure}{r}{6cm}
\includegraphics[width=5.5cm]{test.png}
\end{wrapfigure}
\end{tcblisting}

下表是可以使用的位置

\begin{tabular}{cc}
\hline
參數 & 含義 \\\hline\hline
 r  & 靠右側 \\\hline
 l  & 靠左側 \\\hline
 i  & 雙面模式下靠書封 \\\hline
 o  & 雙面模式下靠書的開口 \\\hline
\end{tabular}\chapter{數學}

\LaTeX\ 很大的一部分功用是排版科學相關文章，而佔最大宗的還是數學相關的文章，因為 \LaTeX\ 有著平易近人的數學輸入法以及足夠大的談鋞，至今扔是學術界慣用的排版軟體。

\section{基本概念}

最簡單的用法是將方程式用 \verb`$......$` 包起來，這樣可以在行內插入數學方程式

\begin{tcblisting}{listing side text}
畢氏定理$C =\sqrt{A^2 + B^2} $
\end{tcblisting}

但當方程式很複雜、或非常重要，讓你需要為他特別清出空間，好彰顯這個方程式的重要性，這時可以使用 \verb`\[......\]` 把方程式包起來

\begin{tcblisting}{listing side text}
畢氏定理：
\[C =\sqrt{A^2 + B^2}\]
相當的重要
\end{tcblisting}

雖然這兩者在輸入上沒有任何的差別，但在輸出上還是會有些許的不同

\begin{tcblisting}{listing side text}
這是隨文數式：$\Sigma^{60}_{k=31}\sin^2k^\circ$\\
這是展示數式：
\[ \Sigma^{60}_{k=31}\sin^2k^\circ \]
\end{tcblisting}

可以看到上下標的位置有所改變

\section{基礎使用}

先從最簡單的四則運算開始說起，除了乘、除的符號需要用 \verb`\times` 與 \verb`\div` 表示以外，其他的運算子都不需要使用命令來表示。

\begin{tcblisting}{listing side text}
$A + B - C \times D \div E = F$
\end{tcblisting}

如果想要輸出分數，需要使用 \verb`\frac{分子}{分母}` 輸出

\begin{tcblisting}{listing side text}
$\frac{a}{b}\\
(\frac{a}{b})^2$
\end{tcblisting}

上面的例子有一個問題，第二行的括號會看起來太小，這時候可以利用 \verb`\left(......\right)` 來讓 \LaTeX\ 自動調整括號的大小。

\begin{tcblisting}{listing side text}
$\left(\frac{a}{b}\right)^2$
\end{tcblisting}

今天的內容有涉及到美國數學家協提供的 \textbf{amssym, amsfonts} 與 \textbf{amsmath} ，若有涉及到這些 package 的應用，我會在下面特別標注，如果沒有標註就是\LaTeX\ 基本的使用。

\section{各種的應用}

基本的函數都是用反斜槓加函數名稱的方式輸出

\begin{tabular}{cccc}
\hline
\verb`\sin` & \verb`\cos` & \verb`\tan` & \verb`\cot` \\\hline
\verb`\arccos`  & \verb`\arcsin` & \verb`\arctan` & \verb`\sec` \\\hline
\verb`\csc`  & \verb`\exp` & \verb`\log` & \verb`\deg` \\\hline
\verb`\lim` & \verb`\inf`  & \verb`\min` & \verb`\max` \\\hline
\end{tabular}

想要使用其他字體嗎？\LaTeX\ 提供了以下幾種字體

\begin{tabular}{cc}
\hline
字體|結果 \\\hline\hline
\verb`\mathrm{ABCabc123}` & $\mathrm{ABCabc123}$ \\\hline
\verb`\mathit{ABCabc123}` & $\mathit{ABCabc123}$ \\\hline
\verb`\mathnormal{ABCabc123}` & $\mathnormal{ABCabc123}$ \\\hline
\verb`\mathcal{ABCabc123}` & $\mathcal{ABCabc123}$ \\\hline
\end{tabular}

數學模式的輸出皆為斜體，可以用 \verb`\mathrm{}` 轉為正體，如果想在數學模式中加粗字體，可以利用 amsmath 提供的 \verb`\boldsymbol` 命令

\begin{tcblisting}{listing side text}
$
\mu ,\boldsymbol{\mu}\\
\delta ,\boldsymbol{\delta}
$
\end{tcblisting}

空心粗體則需要 \textbf{amsfonts} 提供的 \verb`\mathbb{}` 命令

\begin{tcblisting}{listing side text}
$
x > 1 and x \in \mathbb{R}
$
\end{tcblisting}

如果想要將某個公式的推導過程寫下，可以利用 \textbf{amsmath} 提供的 align 環境

\begin{tcblisting}{listing side text}
\begin{align}
x &= 20 +5\\
x &= 25
\end{align}
\end{tcblisting}

在想要對齊的地方用 \& 指定即可，實際上的使用方式就與表格類似，如果不想要編號，使用帶星號的 \verb`align*` 即可

\begin{tcblisting}{listing side text}
\begin{align*}
x &= 20 +5\\
x &= 25
\end{align*}
\end{tcblisting}

如果需要輸出矩陣，可以使用 \verb`matrix` 環境

\begin{tcblisting}{listing side text}
$
\begin{matrix}
3 & 0\\
0 & 3
\end{matrix}
$
\end{tcblisting}

但這樣就只是一些對齊的的數字，所以我們可以利用以下的方式來輸出含有小括號的矩陣

\begin{tcblisting}{listing side text}
\[
\left(\begin{matrix}
2 & 0\\
0 & 2
\end{matrix}\right)
\]
\end{tcblisting}

或者使用由 amsmath 提供的 pmatrix 環境

\begin{tcblisting}{listing side text}
\[
\begin{pmatrix}
2 & 0\\
0 & 2
\end{pmatrix}
\]
\end{tcblisting}

不只是小括號，也可以使用方括號、花括號

\begin{tcblisting}{listing side text}
\[
\begin{bmatrix}
2 & 0\\
0 & 2
\end{bmatrix}
\begin{Bmatrix}
2 & 0\\
0 & 2
\end{Bmatrix}
\]
\end{tcblisting}

甚至是行列式也可以利用這個方法輸出

\begin{tcblisting}{listing side text}
\[
\begin{vmatrix}
2 & 0\\
0 & 2
\end{vmatrix}
\begin{Vmatrix}
2 & 0\\
0 & 2
\end{Vmatrix}
\]
\end{tcblisting}

如果想要輸出聯立方程式，可以利用 amsmath 提供的 cases 環境

\begin{tcblisting}{listing side text}
\[
\begin{cases}
x &= 1\\
y &= 3x + 9
\end{cases}
\]
\end{tcblisting}

當然，我所列出的例子只是滄海一粟，實際上還有更多的可能性，但由於我很少利用這部分的功能，所以我只能簡單地把我知道的使用方式全都寫出，更進一步的使用方式可以參考這些文章。\chapter{繼續前行}

這篇就不再寫技術相關的內容了，而要來介紹哪裡可以找到更多關於 \LaTeX\ 的資料，畢竟書本的內容有限，且學習不能一直閉門造車。

\section{網頁}

以下幾個網頁是我很推薦的資料來源

\begin{itemize}
\item CTAN
\item Overleaf
\item Stack Exchange
\end{itemize}

CTAN 是 Comprehensive TeX Archive Network 的縮寫，基本上只要是 \TeX\ 有關的資料都會被收藏在此（\LaTeX\ 當然也被包含在內），如果有什麼 package 或使用手冊想要找，甚至是自己寫了一個 package 想要與全世界的 \TeX\ 使用者共享，只要到 CTAN 就對了。

Overleaf 不只提供了線上編譯 \LaTeX\ 的服務，他們也為了推廣 \LaTeX\ 寫了許多的技術文章，最棒的是他們的技術文章是為了初學者而設計的，所以不用怕看不懂，但想當然的內容是用英文寫的。

大部分人應該都聽過 Stack Exchange ，如果你有什麼問題想問，不仿先來這裡看看有沒有人問過。

如果有相關的問題，可以先去這些地方尋找答案。

\section{書籍}

書籍有以下幾本

\begin{itemize}
\item The \TeX\ book
\item The Not So Short Introduction to LATEX2ε
\item 簡單高效 \LaTeX
\item 大家來學 \LaTeX
\end{itemize}

The \TeX\ Book 是由高德納教授親自編寫的書籍，可以說是血統純正，但內容主要是介紹 \TeX\ 的的功能，比較適合想要了解 \LaTeX\ 系統底層的人，不建議初學者質監研讀此本書。

簡單高效 \LaTeX\ 與大家來學 \LaTeX\ 皆為中文書籍，是在資源缺乏的中文圈中為數不多的寶藏資料，兩篇皆以精簡的篇幅介紹了 \LaTeX\ 的基礎使用，並且也廣泛的介紹 \LaTeX\ 中常用的 package。 

\chapter{animate}

有時候人總是要會一兩招華而不實的招數，好在需要的時候秀一手，我們可以藉由在 pdf 中加入 gif 動畫以達到上述的效果。

\section{基礎使用}

在使用之前需要先在導言區載入 graphicx package，在載入之後我們就可以利用  \verb`\animategraphics{}{}{}{}` 來插入動畫，但在插入動畫之前，我們需要先了解 animate 是如何插入動畫的，實際上 animate 並不能將 gif 直接塞入 pdf 中，他是利用 javascript 讓 pdf 中的圖片可以動起來，所以在拿到 gif 後我們還需要將 gif 轉成其他格式。

\subsection{格式轉換}

我們需要使用各種手段將 gif 轉換成 png 或 jpeg 等，可以使用 ImageMagick 這個工具來轉換，在安裝好之後可以在終端機用 convert 命令來轉換格式，

\begin{tcblisting}{listing only}
convert input.gif -coalesce output.png
\end{tcblisting}

可以利用這行命令將 gif 改成一系列的圖片。

\subsection{正式使用}

\begin{tcblisting}{listing only}
\animategraphics[autoplay]{.5}{A-}{1}{5}
\end{tcblisting}

\begin{itemize}
\item 前面中括號內放可選參數
\item 第一個花括號是指定動畫的幀數
\item 第二個花括號是檔案的前綴名
\item 第三個花括號是檔案的開頭、第四個則是結束，這條指令會將 A-1, A-2, A-3, A-4, A-5 作為動畫的
\end{itemize}

這裡有一系列的可選參數

\begin{itemize}
\item autoplay: 當滑到動畫所在的頁面時自動播放
\item loop: 不斷重複播放動畫
\item palindrome: 在動畫播放完後倒帶動畫，並重新循環
\item step: 將動畫的放映模式改成點一下播一張
\item controls: 決定動畫下的播放按鈕
\item label: 給定一個 javascript 的標籤
\end{itemize}

\subsection{自行繪製}

隨意使用網路上的 gif 圖可能會有版權相關的問題，但好在我們可以利用 animateinline 環境來自行繪製。

\begin{tcblisting}{listing only}
\begin{animateinline}[begin={\begin{tikzpicture}\draw (-1,-1) rectangle (3.5,1);}end={\end{tikzpicture}}]{0.5}
\draw (0,0)--(0.5,0);
\newframe
\draw (0,0)--(1,0);
\newframe
\draw (0,0)--(1.5,0);
\newframe
\draw (0,0)--(2,0);
\newframe
\draw (0,0)--(2.5,0);
\newframe
\draw (0,0)--(3,0);
\newframe
\draw (0,0)--(3.5,0);
\end{animateinline}
\end{tcblisting}

\begin{itemize}
\item begin 跟 emd 是指在每一幀之前自動插入的命令
\item 整個動畫的大小是依據第一幀的大小來進行縮放的，所以我在每一幀都加入了看不見的正方形以維持動畫大小的一致性
\end{itemize}

當然這些只是簡單的範例，只要你想得到，沒有什麼是你做不出來的。\chapter{用 Beamer 做簡報}

如果想要用 \LaTeX\ 製作簡報，可以利用 beamer 這個文件類型來製作，不只可以做差一張張的靜態投影片，也可以創造出一點點的動畫效果

\subsection{基礎使用}

一個簡單的 beamaer 範例

\begin{tcblisting}{listing only}
\documentclass{beamer} %使用 beamer 為文件類型
\usepackage{xeCJK}
\setCJKmainfont{TW-Kai}
\author{Si manglam}
\title{如何使用 Beamer}
\subtitle{Beamer 大作戰}
\institute{IT 邦幫忙}
\date{2022/09/10}
\begin{document}
\begin{frame}
\titlepage
\end{frame}
\begin{frame}
\frametitle{標題}
\end{frame}
\end{document}
\end{tcblisting}

\begin{itemize}
\item frame 環境創造了新的投影片，所有要在投影片上的內容都要在這個環境內
\item \verb`\titlepage` 自動輸出標題頁
\item \verb`\frametitle`	為當前投影片加入標題
\end{itemize}

如果作者並不只有一個人且來自不同機構，我們需要用微調來讓投影片更美觀

\begin{tcblisting}{listing only}
\title[重大發現]{一個足以改變人類未來的重大發現}
\author[Luke \& manglam]{Si manglam\inst{1} \and Luke\inst{2}}
\institute[實驗室、知名大學]{\inst{1}不具名的實驗室 \and \inst{2}某間知名大學}
\date[22xx 知名會議]{22xx/xx/xx某知名會議}
\end{tcblisting}

上面的例子中，兩個作者與兩個機構中間都用\verb`\and ` 隔開，方括號內的則是在其他地方顯示的，現在可能還看不出差別，但看到下面用 \verb`\usetheme{}` 來使用 beamer 內建主題的範例就可以看出明顯的差異了

\begin{tcblisting}{listing only}
\usetheme{Madrid}
\begin{document}
\begin{frame}
\titlepage
\end{frame}
\begin{frame}
\frametitle{標題}
\end{frame}
\end{document}
\end{tcblisting}

可以看到這樣美觀了許多，同時方括號的內容顯示在下面那排，更多的主題可以在<連結>中找到

\section{小技巧}

beamer 與一般的文件一樣可以用 \verb`\tableofcontents `來建立目錄

<圖片>

也可以利用 \verb`\tableofcontents[currentsection]`來明確的標示現在的章節

<圖片>

beamer 也有針對投影片用途新定義一些環境

\begin{tcblisting}{listing only}
\begin{block}{這是一個 block}
文字
\end{block}

\begin{alertblock}{特別注意}
文字文字文字文字文字
\end{alertblock}

\begin{examples}
文字文字文字文字文字
\end{examples}
\end{tcblisting}

雖然 beamer 的主題有限，但只要換個色系就不會有人發現了

\begin{tcblisting}{listing only}
\usetheme{Madrid}
\usecolortheme{seahorse}
\end{tcblisting}

\section{overlay}

利用 \verb`\only<頁數>{}` 與 \verb`\discover<頁數>{}` 可以控制元素出現的時機，兩者差別在一個是只在特定頁數出現，一個是隱形且只會在特定頁數出現。

\begin{tcblisting}{listing only}
\begin{center}
A\only<1>{第一頁出現}\\
A\discover<1-2>{第一、二頁}\\
A\only<2-3>{第二、三頁}\\
A\discover<3>{第三頁}\\
\end{center}
\end{tcblisting}

如果是想要讓條列的內容一條條出現可以直接在用 \verb`\begin{itemize}[<+->]`

\begin{tcblisting}{listing only}
\begin{itemize}[<+->]
\item 一
\item 二
\item 三
\end{itemize} 
\end{tcblisting}

但如果要特別指定頁數，就要在 \verb`\item `後加 <頁數>

\begin{tcblisting}{listing only}
\begin{itemize}[<+->]
\item<1-> 一
\item<2> 二
\item<3-4> 三
\item<4> 四
\item<5> 五
\end{itemize} 
\end{tcblisting}

可以看到有三出現在兩頁，這些就是 beamer 如何控制 Overlay。\chapter{Beyond LaTeX}

終於完稿了，當初會想寫下這本書可說全部都是意外，事情得要從一個地科作業開始說起，當時在寫地科作業的我正被「如何在 page 內加入數學方程式」而困擾著，於是我打開了 page 內建的插入方程式功能，只見一行大字出現在視窗內「請使用 mathml 或 \LaTeX\ 來插入數學方程式」，這就是我遇見 \LaTeX\ 的過程。

後來我就開始學習 \LaTeX\ ，在學習的過程中我發現跟 \LaTeX\ 有關的中文資料只有兩種，不是簡體字就是有一定年份的資料，除了這之外就全部都是英文資料了，中文資料的缺乏讓我開始思考我可以做什麼來改善這個情況，於是我開始撰寫了這本書，希望可以為臺灣的 \LaTeX\ 社群增添一份可用的資料。

在撰寫途中不禁感嘆自己對 \LaTeX\ 瞭解的不足，同時也驚嘆於 \LaTeX\ 強大的排版功能，也讓我撰寫本書的決心更加強烈，雖然我只是一個高中生，這也只是一個自主學習的計畫，但我也是有力量的，只要我將我的力量貢獻出，某些需要幫助的人就一定能收到，最後希望各位都可以在撰寫 \LaTeX\ 一帆風順。

\begin{flushright}
周造麟－Si manglam\\
Email: qwer09214@gmail.com\\
2022/10/10 寫下
\end{flushright}\chapter{biblatex}

biblatex 是一個管理參考文獻的 package，他可以幫助我們方便快速的管理參考文獻。

\section{前置作業}

首先我們需要準備 .bib 檔， .bib 檔的基礎形式如下

\begin{tcblisting}{listing only}
@Article{key,
author = {作者},
title = {標題},
journal = {期刊},
year = {年份},
}
\end{tcblisting}


\verb`@Article` 是宣告參考文獻是期刊中的文章，key 是在文章中引用連結使用的，但通常我們不用親自撰寫 .bib 檔，因為像 Google Scholar 之類的文獻資料庫都會提供 bibtex 的格式。

圖片

上圖是如何在 Google Scholar 取得 .bib 檔的方式。

\section{基礎使用}

在準備好 .bib 檔後就可以開始使用 biblatex 了，首先我們需要告訴 biblatex 我們的 .bib 檔叫什麼名字。

\begin{tcblisting}{listing only}
%\usepackage{biblatex}
\addbibresource{name.bib}
\end{tcblisting}

利用 \verb`\addbibresource{•}` 告訴 biblatex .bib 檔的名稱後，我們就可以利用 \verb`\cite{key}` 在文章中引用參考文獻了。

\begin{tcblisting}{listing only}
Free software 跟價錢並沒有關係，這裡的 Free 指的是自由。\cite{stallman2002free}
\end{tcblisting}

如果不是使用 overleaf 的人需要注意，我們需要額外跑一次 bibber 和兩次 \LaTeX ，順序如下：

\begin{enumerate}
\item \LaTeX
\item biber
\item \LaTeX 
\item \LaTeX
\end{enumerate}

這樣就可以引用參考文獻了，但我們還需要用 \verb`\printbibliography` 將有用到的參考資料都列出來。

\begin{tcblisting}{listing only}
\printbibliography
\end{tcblisting}

這樣所有被引用過的資料就都被列出來了，如果有參考文獻沒有被直接引用，又想要讓他出現在此，需要用 \verb`\nocite{key}` 將他列出來。

\begin{tcblisting}{listing only}
Free software 跟價錢並沒有關係，這裡的 Free 指的是自由。\cite{stallman2002free}
\nocite{key}
\printbibliography
\end{tcblisting}

如果想將檔案中所有的參考文獻都列出，只需將 key 換成 * 就好了，如果引用了許多文章，但最後在列出時想要分類這一大群的參考文獻時，有兩種方法，第一種是利用 \verb`type=` 來依照參考文獻的類型分類。

\begin{tcblisting}{listing only}
\printbibliography[type=article, title=article]
\printbibliography[type=book, title=book]
\end{tcblisting}

第二個方法是在撰寫 bib 檔時加入 \verb`keywords` ，以便分類。

\begin{tcblisting}{listing only}
\printbibliography[keyword=LaTeX, title=article]
\printbibliography[keyword=Overleaf, title=book]
\end{tcblisting}

\begin{tcblisting}{listing only}
@book{stallman2002free,
  title={Free software, free society: Selected essays of Richard M. Stallman},
  author={Stallman, Richard},
  year={2002},
  publisher={Lulu. com},
  keywords={}
}
\end{tcblisting}

如果想要更進一步的了解 biblatex 到底可以做什麼，可以參考以下幾篇文章。
\chapter{etoolbox}

倒數第二天了，今天要跟大家介紹 etoolbox 這個可以讓你編輯已有命令的 package。

\section{使用之前}

因為這個 package 是讓你編輯已有命令，所以在編輯之前我們必須先找出命令的原始定義，LaTeX 提供了 \verb`\show` 這個命令來協助我們，只要在 \verb`\show`後面接上想要查詢的指令，就可以在 .log 檔中看到命令的定義，除了利用 \verb`\show` 查詢之外，我們也可以直接在原始碼中尋找定義。

不過以上兩種方式都有不便之處，\verb`\show` 無法快速的顯示出命令的定義，直接在原始碼中尋找定義又會花上大把的時間。我們急需一個更方便的方式來尋找命令的定義，latexdef 是你的一個好選擇，只要在終端機上打出 latexdef 加上你要找尋的命令即可。

\begin{tcblisting}{listing only}
latexdef TeX
\end{tcblisting}

\section{實戰}

這裡以有章節標題頁無法被自定義為例，跟章節標題有關的命令只有\verb`\chapter` 所以先讓我們看看 \verb`\chapter` 的定義：

\begin{tcblisting}{listing only}
latexdef chapter
\chapter:
undefined
\end{tcblisting}

你會發現怎麼找不到他的定義，這是因為 latexdef 預設是載入 Plain \TeX\ 格式，而不是 \LaTeX\ 格式，並且預設的文件格式是 article 所以我們還需要指定文件格式：

\begin{tcblisting}{listing only}
latexdef --tex latex -c report chapter
\chapter:
\long macro:->\if@openright \cleardoublepage \else \clearpage \fi \thispagestyle {plain}\global \@topnum \z@ \@afterindentfalse \secdef \@chapter \@schapter
\end{tcblisting}

\begin{itemize}
\item \verb`--`tex 是指定載入的格式
\item -c 是指定載入的文件類別
\end{itemize}

這樣我們就得到\verb|\chapter|的定義了，在裡面找到\verb|\thispagestyle{plain}|這個罪魁禍首，利用 etoolbox 提供的\verb|\xpatchcmd|來修改：

\begin{tcblisting}{listing only}
%\xpatchcmd{命令}{修改前內容}{修改後內容}{ }{ }
\xpatchcmd{\chapter}{\thispagestyle{plain}}{ }{ }{ }
\end{tcblisting}

這樣就可以讓標題頁的樣式是自定義的樣式了。這也是簡單修改命令定義的方式。\chapter{一些有趣的故事}

在文章正式開始之前，我想要先撈叨一些關於 \LaTeX\ 的歷史，因為 \LaTeX\ 的發展史十分有趣，也是極致的駭客精神與開源精神結合的產物，如果對這一段沒有興趣，可以直接跳過這段，直接從教學開始讀起，這並不會影響你對 \LaTeX\ 的學習過程，如果你想了解這段歷史，就讓我們跳上時光機，回到 20 世紀吧！

\section{\LaTeX 歷史}

時間回到 20 世紀，在高德納教授 (Donald Ervin Knuth) 在撰寫他的著作 《The Art of Computer Programming》時，因為當時電腦排版還很粗糙，高德納教授覺得書商把自己的著作排得太難看了，所以他決定自己撰寫一個電腦排版軟體，來拯救自己的著作，於是 \TeX\ 就被發明了。

\TeX\ 是一個低階的排版系統，它可以利用簡單的命令來執行排版任務，也可以將一連串的低階命令封裝成高階命令，以節省時間。通常沒有人會直接使用底層的 \TeX\ 來排版，他們會載入預先定義好的格式，格式包含了大量的\TeX\ 命令，涵蓋了所有的排版細節，就像 CSS 之於 HTML 一樣，高德納教授就自己寫了一個格式 ``Plain \TeX '' 並使用它來進行排版工作。

Plain \TeX\ 被撰寫之後大大地減低了使用 \TeX\ 的難度，但對於普通人來說，Plain \TeX\ 還是過於艱澀難懂，好在 ``Leslie B. Lamport'' 教授因為他的出版需求，所有撰寫出了 \LaTeX\ 這個格式，並且無私的將其授權給所有人使用。至此 \LaTeX\ 就開始了他稱霸學術排版的征途。

\section{我該不該用\LaTeX ?}

相信剛接觸到 \LaTeX\ 的人都會苦惱於這個問題，這種問題通常是來源於對 \LaTeX\ 的認識不深，所以才會產生此種疑問，這一篇就是要協助各位釐清思緒的，先來說說 \LaTeX\ 的優點：

\begin{itemize}
\item 格式穩定，在不同的電腦間不易跑版
\item 數學方程式
\item 非所見即所得，使作者可以專注於文件內容而非排版細節。
\end{itemize}
\pskip
通常情況下只要原始碼一樣 \LaTeX\ 產出的結果也會一樣，這對高度要求版面一制的工作尤其有利，且因為實際上進行排版的是電腦而不是人類，人類只是在描述物件的屬性，所以在撰寫書籍時可以將內容與排版細節分開，以章節標題為例，在 Word 裡標題需要經過放大字體、置中、粗體來創建，但在 \LaTeX\ 中只需要用 \verb|\section{標題}|  \LaTeX\ 就會自動執行放大字體、置中、粗體的步驟，使我們可以更加專注在文章內容。

上文講了一些 \LaTeX\ 的優點，看起來很美好，但沒有事情是完美無缺的，所以下文就要分析 \LaTeX\ 的缺點：

\begin{itemize}
\item 非所見即所得，細節調整要求來回編譯。
\item 學習曲線陡峭
\end{itemize}

非所見即所得既是優點也是缺點，雖然可以讓作者更專注於文章內容，但要微調細節時就會需要不斷地來回編譯。\LaTeX\ 陡峭的學習曲線是學習 \LaTeX\ 時最大的挑戰，但在度過初期的困難之後，你就會發現 \LaTeX\ 之美了。

看完了以上的文章，如果你還對 \LaTeX\ 有興趣，就請接續往下讀吧，但如果你明天就要交作業，可是你今天才接觸到 \LaTeX\ 還是請你暫緩腳步，先將自己的作業交出，再來學習 \LaTeX\ 吧。

\chapter{listing}

如果在 \LaTeX\ 想要輸出程式碼，顯然不可能用 \verb`\textbackslash LaTeX`  如此陽春的方法，所以我們需要特殊的環境或 package 來達成目的。

\section{verb}

最陽春的方法就是利用 LaTeX 內建的 \verb`\verb|......|` 來輸出在行內的程式碼

\begin{tcblisting}{listing side text}
用 \verb|\begin{center}| 來將文字置中
\end{tcblisting}

如果是很重要的程式碼，你想專門為他開一個區塊，可以改用 verbatim 環境

\begin{tcblisting}{}
\begin{verbatim}
\newcounter{example}
\newenvironment{example}{
\refstepcounter{example}
\textbf{Example.\theexample}\ 
}{\\}
\end{verbatim}
\end{tcblisting}

可以看到這一段程式碼單獨的獨立了出來。

\section{listings}

但這樣並不會幫程式碼上色，如果想要美觀的的輸出程式碼可以借助 listings package 的協助。

\begin{tcblisting}{listing side text}
\begin{lstlisting}
\begin{itemize}
\item 1
\item 2
\item 3
\end{itemize}
\end{lstlisting}
\end{tcblisting}

你會看到上面的例子也沒有改善多少，這是因為我們還沒定義程式碼的樣式。

\begin{tcblisting}{listing side text}
\begin{lstlisting}[language={[LaTeX]TeX}, commentstyle=\color{red} ,keywordstyle=\color{blue}, numbers=left]
\begin{itemize}
\item 1
\item 2
\item 3
\end{itemize}
%一個不知道為什麼的列表
\end{lstlisting}
\end{tcblisting}

這樣看起來就好許多了，可是每一次都打這一大長串也不方便，所以可以利用 \verb`\lstset `來設定默認的參數。

\begin{tcblisting}{listing only}
\lstset{
    language={[LaTeX]TeX},
    basicstyle=\sffamily,
    numbers=left,
    numberstyle=\scriptsize,
    frame=tb,
    tabsize=4,
    commentstyle=\color{blue},
    keywordstyle=\color{red},
    morekeywords={ce,draw,node,foreach,in,chemfig,bond,href,hologo,
    ifthenelse,addplot,addplot3,coordinates}
}
\end{tcblisting}

language 是設定程式語言的類型，basicstyle 是設定列出來成果的格式，numberstyle 是控制數字的格式，commentstyle 是控制註解的格式，keywordstyle 是控制關鍵字的格式，morekeywords 則是可以自行加入星的關鍵字。

\section{minted}

但上面的方法有一個問題，就是他只能標記出有被設定過的關鍵字，有時候多少會有點不方便，於是有人將 Pygment 與 \LaTeX\ 結合起來做成了 minted 這個 package，在使用 minted 之前請先確保自己的電腦內有 Pygment詳細的下載方式請參考下面這篇文章。<https://clay-atlas.com/blog/2020/02/10/python-chinese-tutorial-package-pygments-code-highlight/>

minted 提供了 \verb`\begin{minted}[參數]{語言}`......\verb`\end{minted}` 來輸出程式碼

\begin{tcblisting}{listing side text}
\begin{minted}{latex}
\begin{itemize}
\item 1
\item 2
\item 3
\end{itemize}
\end{minted}
%一個不知道為什麼的列表
\end{tcblisting}

可以看到這樣好看很多，如果想要微調輸出格式可以在利用以下的參數。

\begin{tabular}{cc}
參數 & 含義 \\\hline\hline
lineos & 顯示程式碼行數 \\\hline
bgcolor & 背景顏色 \\\hline
numbers & 顯示程式碼行數（可指定位置） \\\hline
mathescape & 可以在 minted 環境中直接輸入數學方程式 \\\hline
escapeinside & 設定跳拖字符 \\\hline
breaklines & 可不可將程式碼換行 \\\hline
\end{tabular}

\begin{tcblisting}{listing side text}
\begin{minted}[linenos, breaklines, mathescape, escapeinside=| |]{latex}
\begin{itemize}
\item 1
\item 2
\item 3
\end{itemize}
$\Sigma_{k=100} \sin(k^\circ)$
|\textcolor{red}{ABC}|
\end{minted}
\end{tcblisting}

如果想要使用別種配色，Pygment 有內建許多不同的 style 可供選擇，只要使用 \verb`\usemintedstyle{style}` 選擇即可。

\begin{tcblisting}{listing side text}
%\usemintedstyle{vim}
\begin{minted}[linenos, breaklines, mathescape, escapeinside=| |]{latex}
\begin{itemize}
\item 1
\item 2
\item 3
\end{itemize}
$\Sigma_{k=100} \sin(k^\circ)$
|\textcolor{red}{ABC}|
\end{minted}
\end{tcblisting}

這樣就可以更改樣式了，詳細的樣式與支持的語言，請參考 Pygment 的官網。\chapter{LuaLaTeX 做動畫}

繼上一篇介紹了 Lua\LaTeX 後，相信大家都瞭解了 Lua\LaTeX 的基本使用方式，今天要教大家的則是如何用 Lua\LaTeX 加上 animate 製作動畫，特別提醒：這不是正常的 Lua\LaTeX 的使用方法。

\section{基礎創作}

基本上最常使用到的環境大概是物件的移動，我們不太可能一幀幀的繪製出物件的移動軌跡，因為那樣程式碼會顯得過於冗長，所以我們可以利用 for 迴圈去縮減程式碼。

\begin{tcblisting}{listing only}
\begin{luacode}
tex.sprint("\\begin{animateinline}[autoplay,loop]{10}")
for x = -4,4,0.1 do
	tex.sprint("\\begin{tikzpicture}")
	tex.sprint("\\draw[color=white] (-5,-5) rectangle (5,5);")
	tex.sprint("\\draw[fill=black] (".. x ..",0) circle (0.5);")
	tex.sprint("\\end{tikzpicture}")
	tex.sprint("\\newframe")
end
tex.sprint("\\end{animateinline}")
\end{luacode}
\end{tcblisting}

編譯出來的動畫是一個小球漸漸的從左移到右，比起一幀幀繪製，這樣簡單多了。

\section{進階創作}

更進階的創作用法可以再加上 if 迴圈，例如以下的動畫：

\begin{tcblisting}{listing only}
\begin{luacode}
tex.sprint("\\begin{animateinline}[autoplay,loop]{10}")
for x = 0,360,5 do
	tex.sprint("\\begin{tikzpicture}")
	tex.sprint("\\draw[color=white] (-2,-2) rectangle (2,2);")
	if (math.sin(math.rad(x)) > 0) then
		tex.sprint("\\draw[fill=red] (0,".. math.sin(math.rad(x)) ..") circle (0.5);")
	else
		tex.sprint("\\draw[fill=blue] (0,".. math.sin(math.rad(x)) ..") circle (0.5);")
	tex.sprint("\\end{tikzpicture}")
	tex.sprint("\\newframe")
end
tex.sprint("\\end{animateinline}")
\end{luacode}
\end{tcblisting}

編譯出的結果是一個會隨著高度變換顏色的小球，更多的使用方法就要靠你們自己去發想了，只要是有規律地動會，都可以用這種方式繪製出來的。\chapter{lualatex}

Lua\LaTeX 是將 Lua 與 \TeX\ 結合在一起，讓改動 \TeX\ 的排版規則時可以不用 \TeX ing，更詳細的使用需要對 Lua\TeX 與 \LaTeX\ 有深刻的認識，目前我的能力還不到這麼深厚，所以我只介紹一些基礎的用法。

\section{基礎用法}

想要在 Lua\LaTeX 裡使用 Lua 需要透過 \verb`\directlua{}` 的協助，這個命令會將花括號中命令轉給 Lua 解釋器，要想讓 Lua 產出的結果可以轉回給 \LaTeX 需要用 \verb``tex.sprint`。

\begin{tcblisting}{listing only}
tex.sprint("$\cos(0)$等於".. math.cos(math.rad(0)))
\end{tcblisting}

執行之後可以看到 $\cos$ 被輸出出來了，這就是基礎的 Lua\LaTeX 的用法更進階的也可以將 for 迴圈帶入使用

\begin{tcblisting}{listing only}
\directlua{
tex.sprint("\\begin{tabular}{|c|c|c|}")
tex.sprint("\\hline")
tex.sprint("x & sin(x) & cos(x) \\\\ ")
tex.sprint("\\hline")
for x = 0,180,10 do
	tex.sprint(x .." & ".. math.sin(math.rad(x)) .." & ".. math.cos(math.rad(x)) .." \\\\ ")
	tex.sprint("\\hline")
end
tex.sprint("\\end{tabular}")
}
\end{tcblisting}

執行後可以看到有表格被產出了，如果有什麼重複性高的指令，也可以用這種方式來節省時間，這是基礎的 Lua\LaTeX 的使用方法。

\section{進階使用}

進階使用我也不會所以在這裡放一個我看到的例子：

\begin{tcblisting}{listing only}
function fadelines(head)
        GLYPH = node.id("glyph")
        WHAT = node.id("whatsit")
        COL = node.subtype("pdf_colorstack")
        colorize = node.new(WHAT,COL)
        cvalue = 0
        for line in node.traverse_id(GLYPH,head) do
            colorize.data = cvalue.." "..1 - cvalue.." .5".." rg"
            node.insert_before(head, line, node.copy(colorize))
            cvalue = math.min(cvalue + .0008, 1)
        end
        return head
    end

    luatexbase.add_to_callback("pre_linebreak_filter", fadelines, "fadelines")
\end{tcblisting}

這樣產生的結果如下圖：

\begin{figure}[htp]
\centering
\includegraphics[width=0.75\textwidth]{sampla.pdf}
\end{figure}

要達成這種效果，需要對 Lua\LaTeX 以及 \LaTeX 有著即為深厚的認識。\chapter{pgfplots}

pgfplots 是一個可以畫出複雜的三維圖表的強大 Package，需要注意的是這個 Package 是基於前面介紹過的 \TikZ\ ，所以在使用之前請記得要先使用 \TikZ 。

\section{簡介}

在使用 pgfplots 之前我們需要先使用 tikzpicture 環境，之後再使用 pgfplots  提供的 axis 環境。

\begin{tcblisting}{}
\begin{tikzpicture}
\begin{axis}
......
\end{axis}
\end{tikzpicture}
\end{tcblisting}

我們要將 pgfplots 提供的命令放在 axis 環境中，第一個要介紹的是  \verb`\addplot` 這個命令，大部分可選參數是與 \TikZ 的可選參數相同，方程式則是與大部分程式語言的表達方式一樣。

\begin{tcblisting}{}
%\addplot[可選參數]{方程式}
\begin{tikzpicture}
\begin{axis}
\addplot[domain=-5:5, color=blue] {x^2};
\end{axis}
\end{tikzpicture}
\end{tcblisting}

使用完之後也請不要忘記在最後面加上 ;。

\section{二維圖形}

\subsection{函數圖}

第一個介紹的還是函數圖，簡單的範例上面展示過了，所以這裡會比較注重在介紹不同的可選參數。

\begin{tcblisting}{}
\begin{tikzpicture}
\begin{axis}
\addplot[domain=-5:5, color=blue] {x^2};
\end{axis}
\end{tikzpicture}
\end{tcblisting}

這是上面所展示的陽春例子，我們可以再多加一個方程式讓他看起來好一點。

\begin{tcblisting}{}
\begin{tikzpicture}
\begin{axis}
\addplot[domain=-5:5, color=blue] {x^2};
\addplot[domain=-5:5, color=red] {x^2/2};
\end{axis}
\end{tikzpicture}
\end{tcblisting}

可是這樣沒有標示難免會讓人搞混，所以我們可以利用 \verb`\addlegendentry ` 加入註解。

\begin{tcblisting}{}
\begin{tikzpicture}
\begin{axis}
\addplot[domain=-5:5, color=blue] {x^2};
\addlegendentry{\(y=x^2\)}
\addplot[domain=-5:5, color=red] {x^2/2};
\addlegendentry{\(y=\frac{1}{2}x^2\)}
\end{axis}
\end{tikzpicture}
\end{tcblisting}

這樣就不會搞混了，如果今天想要用對數來當 x, y 軸的單位，pgfplots 也有提供 \verb`\begin{semilogxaxis}` 與 \verb`\begin{semilogyaxis}` 來解決這個問題。

\begin{tcblisting}{}
\begin{tikzpicture}
\begin{semilogyaxis}
\addplot[domain=-10:10, color=blue, samples=1000] {log10(x)};
\end{semilogyaxis}
\end{tikzpicture}
\end{tcblisting}

有時候座標軸會不符合我們想要的樣式，這時可以利用 axis lines 來調整。

\begin{tcblisting}{}
\begin{tikzpicture}
\begin{axis}[axis lines = middle]
\addplot[domain=-10:10, color=blue, samples=250] {sin(deg(x))};
\end{axis}
\end{tikzpicture}
\end{tcblisting}

\subsection{折線圖}

除了函數圖外，pgfplots 也可以繪製折線圖。

\begin{tcblisting}{}
\begin{tikzpicture}
\begin{axis}
\addplot coordinates{(0,0)(1,4)(2,3)(3,5)(4,2)(5,1)(6,0)(7,8)};
\end{axis}
\end{tikzpicture}
\end{tcblisting}

在 coordinates 後面的將放入所有折線圖的點，就可以畫出折線圖了，但有時座標軸上的標記與想像中的並不一樣，這時就需要用 xtick 與 ytick 調整。

\begin{tcblisting}{}
\begin{tikzpicture}
\begin{axis}[
xmin=0, xmax=7,
ymin=0, ymax=10,
xtick={0,1,2,3,4,5,6,7},
ytick={0,1,2,3,4,5,6,7,8,9,10},
ymajorgrids=true,
]
\addplot coordinates{(0,0)(1,4)(2,3)(3,5)(4,2)(5,1)(6,0)(7,8)};
\end{axis}
\end{tikzpicture}
\end{tcblisting}

\begin{itemize}
\item xmin, ymin, xmax, ymax 這些是指定 x 軸與 y 軸的最大、最小值
\item xtick, ytick 是指定 x 軸與 y 軸上的標記的位置
\item ymajorgrids 是繪製出與 y 軸相交的格線，可以用 xmajorgrids 來繪製出與 x 軸相交的格線，或用 grids=major 同時繪製兩者。
\end{itemize}

\subsection{長條圖}

長條圖與折線圖有者異曲同工之妙

\begin{tcblisting}{}
\begin{tikzpicture}
\begin{axis}[ybar, ybar interval=0.75, enlargelimits=0.1]
\addplot coordinates{(2040,9.50)(2030,10.60) (2020,12.58)};
\addplot coordinates{(2020,17.50) (2030,24.10) (2040,30.60)};
\legend{0~14歲人口所占比率(\%),65歲以上人口所占比率(\%)}
\end{axis}
\end{tikzpicture}
\end{tcblisting}

\begin{itemize}
\item ybar 指的是長條與 y 軸平行，另外還有 xbar 這個選項可以用。
\item ybar interval 是指定長條之間的空隙，1 代表沒有空隙。
\item enlarge limits 是調整整個座標軸與圖表的元素間的距離，另外也可以用enlarge x limits, enlarge y limits 等等來單獨調整特定的座標軸。
\end{itemize}

\subsection{散佈圖}

散佈圖也很簡單。

\begin{tcblisting}{}
\begin{tikzpicture}
\begin{axis}
\addplot[scatter, mark=*, only marks]
coordinates{(143,62) (50,594) (165,53) (139,348) (145,194) (75,533) (51,258) (154,492)};
\end{axis}
\end{tikzpicture}
\end{tcblisting}

\begin{itemize}
\item scatter 是讓顏色依據 y 軸的數值而變化
\item only marks 是不讓點之間用線連起來
\item mark 是指定點的標記的樣式
\end{itemize}

\subsection{從其他檔案輸入數據}

上面的方法這只適用於數據只有寥寥幾筆時，不然如果有一千多筆，一個一個 key 未免太過勞神費力，不過 pgfplots 都幫你想好了，他可以讓你從 .dat 或 .csv 檔中輸入數據。

\begin{tcblisting}{}
\begin{tikzpicture}
\begin{axis}[x tick label style={/pgf/number format/1000 sep=},width=10cm, grid=major]
\addplot table [x=year, y=youth, col sep=comma, mark=none] {data.csv};
\addlegendentry{0~14歲人口所占比率(％)}
\addplot table [x=year, y=old, col sep=comma, mark=none] {data.csv};
\addlegendentry{65歲以上人口所占比率(％)}
\end{axis}
\end{tikzpicture}
\end{tcblisting}

\begin{itemize}
\item x tick label style 是調整 x 軸上標示的樣式。
\item table 是表示資料來源是類似表格的形式。
\item x=, y= 是指定 x, y 的數據要從哪一欄輸入。
\item col sep 是告訴 pgfplots 欄與欄的分界是用什麼符號。
\end{itemize}

\section{三維圖形}

終於進入三維圖形了，三維圖形的繪製方式與二維圖形相似，只是命令要改用 \verb`\addplot3` 這個命令外，其他的選項幾乎都通用。

\begin{tcblisting}{}
\begin{tikzpicture}
\begin{axis}
\addplot3[surf] {exp(-x^2-y^2)*x};
\end{axis}
\end{tikzpicture}
\end{tcblisting}

surf 是 surface 的縮寫與 scatter 有異曲同工之妙，同樣會因為某一軸的數值高低而產生顏色變化。\chapter{tcolorbox}

今天要介紹的是 tcolorbox，它提供了一個簡單的產生高度客製化 color box 的方式。

\section{基礎使用}

tcolorbox 提供了 tcolorbox 這個環境供我們建立 colorbox

\begin{tcblisting}{listing side text}
\begin{tcolorbox}
This is a colored box.
\end{tcolorbox}
\end{tcblisting}

\subsection{Style}

\begin{tabular}{cc}
參數 & 含義 \\\hline\hline
colback & 底色 \\\hline
colbacklower & 下半部分的底色 \\\hline
colframe & 邊匡顏色 \\\hline
coltitle & title 欄的底色 \\\hline
colupper & 上半部分文字的顏色 \\\hline
collower & 下半部分文字的顏色 \\\hline
coltext & 文字顏色 \\\hline 
subtitle style & title 欄的樣式 \\\hline
boxrule & 邊匡粗細 \\\hline
fonttitle & 標題文字的樣式 \\\hline
fontupper & 上半部分文字的樣式 \\\hline
fontlower & 下半部分文字的顏色 \\\hline
\end{tabular}

需要注意的是 colbacklower 需要搭配其他命令才可使用，之後會介紹到，如果想要設定一個預設值可以利用`\tcbset{}`來完成。

\subsection{標題與副標題}

可以用`[title=title]`為他加入標題

\begin{tcblisting}{listing side text}
\begin{tcolorbox}[title=Title]
This is a colored box with a title.
\end{tcolorbox}
\end{tcblisting}

也可以用`\tcbsubtitle{Subtitle}`來插入副標題

\begin{tcblisting}{listing side text}
\begin{tcolorbox}[title=Title]
This is a colored box with a title.
\tcbsubtitle{Subtitle}
And subtitle.
\end{tcolorbox}
\end{tcblisting}

\subsection{上下分段}

如果你想要將一個 box 分成兩段可以利用 \verb`\tcblower`

\begin{tcblisting}{listing side text}
\begin{tcolorbox}
Upper Box
\tcblower
Lower Box
\end{tcolorbox}
\end{tcblisting}

這樣預設會是上下兩段，可以利用 sidebyside 改成左右各佔一半

\begin{tcblisting}{listing side text}
\begin{tcolorbox}[sidebyside]
Upper Box
\tcblower
Lower Box
\end{tcolorbox}
\end{tcblisting}

\subsection{更多}

但 tcolorbox 可不只有這樣，你可以利用 \verb`\tcbuselibrary{}` 去調用一些延伸功能，例如調用 skin 可以讓上下兩段的顏色分開設定

\begin{tcblisting}{listing side text}
%\tcbuselibrary{skins}
\begin{tcolorbox}[skin=bicolor, sidebyside, colback=gray!30!white,colbacklower=gray!5!white]
Bicolor
\tcblower
Bicolor
\end{tcolorbox}
\end{tcblisting}

當然除了上述的技巧之外，tcolorbox 還有許多用處我沒有講到，如果想要好好的研究可以參考他的使用手冊<連結>。